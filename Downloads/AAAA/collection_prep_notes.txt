WeakHashMap
------------
Key objects whose equals methods test for object identity using the == operator. 
This class will work perfectly well with key objects whose equals methods are not based upon object identity, such as String instances.
Once such a key is discarded it can never be recreated, 
so it is impossible to do a lookup of that key in a WeakHashMap at some later time and be surprised that its entry has been removed. 
With such recreatable key objects, however, the automatic removal of WeakHashMap entries whose keys have been discarded may prove to be confusing.

The behavior of the WeakHashMap class depends in part upon the actions of the garbage collector, 
so several familiar (though not required) Map invariants do not hold for this class. 
Because the garbage collector may discard keys at any time, a WeakHashMap may behave as though an unknown thread is silently removing entries. 
In particular, even if you synchronize on a WeakHashMap instance and invoke none of its mutator methods, 
it is possible for the size method to return smaller values over time, for the isEmpty method to return false and then true, 
for the containsKey method to return true and later false for a given key, for the get method to return a value for a given key but later return null, 
for the put method to return null and the remove method to return false for a key that previously appeared to be in the map, 
and for successive examinations of the key set, the value collection, and the entry set to yield successively smaller numbers of elements.

Each key object in a WeakHashMap is stored indirectly as the referent of a weak reference. 
Therefore a key will automatically be removed only after the weak references to it, 
both inside and outside of the map, have been cleared by the garbage collector.


Types of References in Java
---------------------------
In Java there are four types of references differentiated on the way by which they are garbage collected.

1. Strong References
2. Weak References
  a. Soft References
  b. Phantom References

Strong References: 
-------------------
This is the default type/class of Reference Object. 
Any object which has an active strong reference are not eligible for garbage collection. 
The object is garbage collected only when the variable which was strongly referenced points to null.

MyClass obj = new MyClass (); 
obj = null;

Weak References: 
-----------------
Weak Reference Objects are not the default type/class of Reference Object and they should be explicitly specified while using them.
1. This type of reference is used in WeakHashMap to reference the entry objects .
2. If JVM detects an object with only weak references (i.e. no strong or soft references linked to any object), 
this object will be marked for garbage collection.
3. To create such references java.lang.ref.WeakReference class is used.
4. These references are used in real time applications while establishing a DBConnection 
which might be cleaned up by Garbage Collector when the application using the database gets closed.

// You can retrieve back the object which has been weakly referenced.
Gfg g = new Gfg();     
g.x();
WeakReference<Gfg> weakref = new WeakReference<Gfg>(g);
g = null; 
g = weakref.get(); 
g.x();

Two different levels of weakness can be enlisted: Soft and Phantom
Soft References: 
----------------
In Soft reference, even if the object is free for garbage collection then also its not garbage collected, until JVM is in need of memory badly.
The objects gets cleared from the memory when JVM runs out of memory.
To create such references java.lang.ref.SoftReference class is used.

Gfg g = new Gfg();     
g.x();    
SoftReference<Gfg> softref = new SoftReference<Gfg>(g);
g = null; 
g = softref.get(); 
g.x();

Phantom References: 
----------------------
The objects which are being referenced by phantom references are eligible for garbage collection. 
But, before removing them from the memory, JVM puts them in a queue called ‘reference queue’ . 
They are put in a reference queue after calling finalize() method on them.
To create such references java.lang.ref.PhantomReference class is used.

Gfg g = new Gfg();     
g.x();
          
ReferenceQueue<Gfg> refQueue = new ReferenceQueue<Gfg>();
PantomReference<Gfg> phantomRef = null;    
phantomRef = new PhantomReference<Gfg>(g,refQueue);   
g = null; 
g = phantomRef.get(); 
//It shows NullPointerException.
g.x();




Equals
------
It’s default implementation simply check the object references of two objects to verify their equality. 
By default, two objects are equal if and only if they are stored in the same memory address.

hashCode
---------
By default, integer value is mostly derived from memory address of the object in heap

Immutable & Synchronised
------------------------
Collections.unmodifiableList(dataList);
Collections.synchronizedList(dataList);


Map
---
Operates on key value pair
-- key must be immutable


TreeSet & TreeMap
-----------------
Only compare method is compulsory in Key otherwise duplicates
No effect of equals and hashcode method
			 
HashSet & LinkedHashSet || HashMap & LinkedHashMap
--------------------------------------------------
Mandatory to have equals and hashCode implemented
If any of these missed ---> results in duplicate objects


ArrayList
---------
Threshold = (Current Capacity) * (Load Factor)
The load factor is the measure that decides when to increase the capacity of the ArrayList. 
The default load factor of an ArrayList is 0.75f.  
For example, current capacity is 10. 
So, loadfactor = 10*0.75=7 while adding the 7th element array size will increase.  
So, It would be good practice if we choose the initial capacity, by keeping the number of expected elements in mind as approx.

HashMap
-----------
Initially, it has a bucket size of 16 which grows to 32 when the number of entries in the map crosses the 75%. 
(That means after inserting in 12 buckets bucket size becomes 32)
HashMap buckets normally use linked lists, but for the linked lists the worst-case time is O(n) for lookup.
Also note that Ordinary binary search trees have pathological cases where they become O(n) [basically BST becomes skewed]
red-black/AVL trees are specifically designed to prevent these cases. O(log⁡n)

Re-Hashing :
Threshold value = Bucket size * Load factor
Whenever the number of entries in the hashmap crosses the threshold value then the bucket size of the hashmap is doubled
rehashing is performed and all the already existing entries of the map are copied and new entries are added to this increased hashmap.


Frequently Used Hashmap Methods:
public boolean containsKey(Object key):     Returns true if this map contains a mapping for the specified key.
public boolean containsValue(Object value): Returns true if this map maps one or more keys to the specified value.
public V get(Object key):                   Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.
public V put(K key, V value):               Associates the specified value with the specified key in this map (optional operation). If the map previously contained a mapping for the key, the old value is replaced by the specified value.
public void putAll(Map<? extends K, ? extends V> m): Copies all of the mappings from the specified map to this map. These mappings will replace any mappings that this map had for any of the keys currently in the specified map.
public V remove(Object key):                Removes the mapping for a key from this map if it is present (optional operation).
public boolean isEmpty():                   A utility method returning true if no key-value mappings are present in the map.
public int size():                          Returns the number of key-value mappings in this map. If the map contains more than Integer.MAX_VALUE elements return Integer.MAX_VALUE.
public Set<K> keySet():                     Returns a Set view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa.
public Set<Map.Entry<K,V>> entrySet():      This method returns a Set view of the HashMap mappings. This set is backed by the map, so changes to the map are reflected in the set, and vice-versa.


ConcurrentHashMap:  
--------------------
At a time any number of threads are applicable for a read operation without locking the ConcurrentHashMap object which is not there in HashMap.
In ConcurrentHashMap, the Object is divided into a number of segments according to the concurrency level.
The default concurrency-level of ConcurrentHashMap is 16.

In ConcurrentHashMap, at a time any number of threads can perform retrieval operation but for updated in the object, 
the thread must lock the particular segment in which the thread wants to operate. 
This type of locking mechanism is known as Segment locking or bucket locking. 

Hence at a time, 16 update operations can be performed by threads.

Inserting null objects is not possible in ConcurrentHashMap as a key or value.



Exception - Child Exception is Optional
---------------------------------------
If superclass method throws/declare checked 
1. overridden method of subclass can declare/throw narrower (subclass of) checked exception
2. overridden method of subclass cannot declare/throw broader (superclass of) checked exception
3. overridden method of subclass can declare/throw any unchecked /RuntimeException


If superclass method throws/declare unchecked
1. overridden method of subclass can declare/throw any unchecked /RuntimeException (superclass or subclass)
2. overridden method of subclass cannot declare/throw any checked exception

ClassNotFoundException  v/s NoClassDefFoundError 
1. ClassNotFoundException is Checked (compile time) Exception in java.
	a. ClassNotFoundException is thrown when JVM tries to class from classpath but it does not find that class.

2. NoClassDefFoundError is a Error in java
	b. NoClassDefFoundError is thrown when JVM tries to load class which >
	i. was NOT available at runtime but
	ii.was available at compile time.
		
		
Memory Leakage
objects are no longer being used by the application, but the Garbage Collector is unable to remove them from working memory
Specifying Heap Size --> -Xms<size> & -Xmx<size>
1. Static Field Holding On to the Object Reference
2. Calling String.intern() on Long String
	 interned String objects are stored in PermGen space 
	 -XX:MaxPermSize=<size>
3. Unclosed Streams
4. Unclosed Connections
5. Adding Objects with no hashCode() and equals() into a HashSet


How to Find Leaking Sources in Your Application
-----------------------------------------------
1. Verbose Garbage Collection --> -verbose:gc 
2. Do Profiling -->  Visual VM
	Monitoring Tab - 
	1. Perform GC
	2. Heap Dump
3. Review Your Code


Deadlock in Threads
-------------------
Found one Java-level deadlock:
=============================
"Thread-0":
  waiting to lock monitor 0x0000017f43f87980 (object 0x000000008a2e9ce0, a com.company.threads.Shared),
  which is held by "Thread-1"
"Thread-1":
  waiting to lock monitor 0x0000017f43f87780 (object 0x000000008a2e9cd0, a com.company.threads.Shared),
  which is held by "Thread-0"

Java stack information for the threads listed above:
===================================================
"Thread-0":
        at com.company.threads.Shared.test2(Deadlock.java:40)
        - waiting to lock  (a com.company.threads.Shared)
        at com.company.threads.Shared.test1(Deadlock.java:33)
        - locked  (a com.company.threads.Shared)
        at com.company.threads.Thread1.run(Deadlock.java:67)
"Thread-1":
        at com.company.threads.Shared.test2(Deadlock.java:40)
        - waiting to lock  (a com.company.threads.Shared)
        at com.company.threads.Shared.test1(Deadlock.java:33)
        - locked  (a com.company.threads.Shared)
        at com.company.threads.Thread2.run(Deadlock.java:90)

Found 1 deadlock.



Thread 
1. Producer - Consumer
2. Print Even Odd Number
3. Print Sequence

Making an array volatile
------------------------------
The elements of an array don’t have the volatile behavior though we declare it volatile.
To resolve this, Java provides two classes namely AtomicIntegerArray and, AtomicLongArray.

Declaring an array volatile does not give volatile access to its fields. You're declaring the reference itself volatile, not its elements.
In other words, you're declaring a volatile set of elements, not a set of volatile elements.


GC Generations
--------------
1. Young Generation : It is place where lived for short period and divided into two spaces:
A. Eden Space : When object created using new keyword memory allocated on this space.
B. Survivor Space : This is the pool which contains objects which have survived after java garbage collection from Eden space.

2. Old Generation : This pool basically contains tenured and virtual (reserved) space and will be holding those objects which survived after garbage collection from Young Generation.
A. Tenured Space: This memory pool contains objects which survived after multiple garbage collection means object which survived after garbage collection from Survivor space.

3. Permanent Generation : This memory pool as name also says contain permanent class metadata and descriptors information so PermGen space always reserved for classes and those that is tied to the classes for example static members.


Garbage Collection 
------------------
Types of JVM Garbage Collectors in Java with implementation details

1. Serial Garbage Collector : 
It freezes all other running threads of application until garbage collection operations have concluded
java -XX:+UseSerialGC -jar GFGApplicationJar.java

2. Parallel Garbage Collector
Parallel Garbage Collector uses multiple threads to perform cleaning of unused heap area
java -XX:+UseParallelGC -XX:ParallelGCThreads=NumberOfThreads -jar GFGApplicationJar.java

3. CMS Garbage collector(concurrent mark-sweep garbage collector) 
1. If there is a change in heap memory in parallel.
2. While marking the referenced objects in the old generation space.
java -XX:+UseParNewGC -jar GFGApplicationJar.java

4. G1 Garbage Collector
G1 collector partitions the heap space into multiple equal-sized regions
designed for an application having heap size greater than 4GB. It divides the heap area into multiple regions vary from 1MB to 32MB
G1 Garbage Collector mark the heap region which has objects that are in use throughout the heap
java -XX:+UseG1GC -jar GFGApplicationJar.java
 

Shallow Copy & Deep Copy & Lazy Copy
------------------------------------
Shallow Copy:
1. it creates new instance and copies all the field of object to that new instance and returns it as object type
2. he cloned object also refers to the same object to which the original object refers as 
only the object references gets copied and not the referred objects themselves.


Deep Copy:
copying over the values

Lazy Copy: 
a combination of both shallow copy and deep copy.
1. at the initial state, shallow copy approach is used
2. A counter is also used to keep a track on how many objects share the data.
3. When the program wants to modify the original object, it checks whether the object is shared or not.
4. If the object is shared, then the deep copy mechanism is initiated.


Serialization and Deserialization in Java
------------------------------------------
Serialization is a mechanism of converting the state of an object into a byte stream. 
Deserialization is the reverse process where the byte stream is used to recreate the actual Java object in memory. 
This mechanism is used to persist the object.

The byte stream created is platform independent. 
So, the object serialized on one platform can be deserialized on a different platform.

To make a Java object serializable we implement the java.io.Serializable interface.
The ObjectOutputStream class contains writeObject() method for serializing an Object.
The ObjectInputStream class contains readObject() method for deserializing an object.

Points to remember
1. If a parent class has implemented Serializable interface then child class doesn’t need to implement it but vice-versa is not true.
2. Only non-static data members are saved via Serialization process.
3. Static data members and transient data members are not saved via Serialization process.
    So, if you don’t want to save value of a non-static data member then make it transient.
4. Constructor of object is never called when an object is deserialized.
5. Associated objects must be implementing Serializable interface.


SerialVersionUID
The Serialization runtime associates a version number with each Serializable class called a SerialVersionUID, 
which is used during Deserialization to verify that sender and reciever of a serialized object have loaded classes for that object 
which are compatible with respect to serialization. 
If the reciever has loaded a class for the object that has different UID than that of corresponding sender’s class,
 the Deserialization will result in an InvalidClassException. A Serializable class can declare its own UID explicitly by declaring a field name.
It must be static, final and of type long.
i.e- ANY-ACCESS-MODIFIER static final long serialVersionUID=42L;


Transient variables
A variable defined with transient keyword is not serialized during serialization process.
This variable will be initialized with default value during deserialization. (e.g: for objects it is null, for int it is 0).

Static Variables
A variable defined with static keyword is not serialized during serialization process.
This variable will be loaded with current value defined in the class during deserialization.

Externalizable interface in Java
----------------------------------
Externalization serves the purpose of custom Serialization, where we can decide what to store in stream.
Externalizable interface present in java.io, is used for Externalization which extends Serializable interface. 
It consist of two methods which we have to override to write/read object into/from stream which are- 

// to read object from stream
void readExternal(ObjectInput in) 

// to write object into stream
void writeExternal(ObjectOutput out) 

Methods : 
Serializable is marker interface without any methods. 
Externalizable interface contains two methods: writeExternal() and readExternal()

Process: 
Default Serialization process will take place for classes implementing Serializable interface. 
Programmer defined Serialization process for classes implementing Externalizable interface.